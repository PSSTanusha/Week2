                                                             Callback Hell

  The concept of callbacks is great in theory, it can lead to some really confusing and difficult-to-read code. Just imagine 
  if you need to make callback after callback:
   
    getData(function(a){  
    getMoreData(a, function(b){
        getMoreData(b, function(c){ 
            getMoreData(c, function(d){ 
                getMoreData(d, function(e){ 
                    ...
                });
            });
          });
       });
     });  
   This is looking bad just from the skeleton itself. In real code you will obviously have other statements like if, for
 or some other operations along with these nested functions. Add those to the above code and it would get really messy and unmanageable.This is also known as "pyramid of doom".
 The 4 problems introduced by Callback Hell are.
  1.Not Exception Safe
  2.Nightmare Nested Calls
  3.Hard to do Parallel Async Tasks
  4.Bad Particular and Centralized Error Handling
 we can resolve this problem by using Promises.
Example:
 fs.readdir(source, function (err, files) {
  if (err) {
    console.log('Error finding files: ' + err)
  } else {
    files.forEach(function (filename, fileIndex) {
      console.log(filename)
      gm(source + filename).size(function (err, values) {
        if (err) {
          console.log('Error identifying file size: ' + err)
        } else {
          console.log(filename + ' : ' + values)
          aspect = (values.width / values.height)
          widths.forEach(function (width, widthIndex) {
            height = Math.round(width / aspect)
            console.log('resizing ' + filename + 'to ' + height + 'x' + height)
            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {
              if (err) console.log('Error writing file: ' + err)
            })
          }.bind(this))
        }
      })
    })
  }
})
